name: Mobility Deployment
on:
  push:
    branches: [ qa ]
    paths-ignore:
      - '**.md'
jobs:
  build-and-deploy-all:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Create .env file
      run: |
        echo "HOST_API_KEY=${{ secrets.HOST_API_KEY }}" >> .env
        echo "HOST_API_FE=${{ secrets.HOST_API_FE }}" >> .env
        
        # Create the PEM key with proper formatting
        cat > temp_key.pem << 'PEMEOF'
        ${{ secrets.ENCRYPT_PUBLIC_KEY }}
        PEMEOF
        
        # Add the key to .env as a single line with \n escape sequences
        echo -n "ENCRYPT_PUBLIC_KEY=" >> .env
        cat temp_key.pem | tr '\n' '\' | sed 's/\\$/\\n/g' >> .env
        
        # Clean up temporary file
        rm temp_key.pem
    
    - name: Create next.config.js
      run: |
        cat <<'EOF' > next.config.js
        /** @type {import('next').NextConfig} */ 
        const nextConfig = {
          reactStrictMode: true,
          output: "standalone",
          env: {
            HOST_API_KEY: process.env.HOST_API_KEY, 
            HOST_API_FE: process.env.HOST_API_FE,
            ENCRYPT_PUBLIC_KEY: process.env.ENCRYPT_PUBLIC_KEY
          },
          // Add webpack optimization for chunk loading
          webpack: (config, { isServer }) => {
            // Only run on client-side
            if (!isServer) {
              // Optimize chunk size
              config.optimization.splitChunks = {
                chunks: 'all',
                cacheGroups: {
                  default: false,
                  vendors: false,
                  // Vendor chunk for third-party modules
                  vendor: {
                    name: 'vendor',
                    chunks: 'all',
                    test: /node_modules/,
                    priority: 20,
                  },
                  // Common chunk for code shared between pages
                  common: {
                    name: 'common',
                    minChunks: 2,
                    chunks: 'all',
                    priority: 10,
                    reuseExistingChunk: true,
                    enforce: true,
                  },
                },
              };
            }
            return config;
          },
        };
        module.exports = nextConfig;
        EOF
        
    # Mobility
    - name: Build and push Mobility
      run: |
        docker build -f Dockerfile -t ${{ secrets.ACR_LOGIN_SERVER }}/h905awi-qa-mobility:${{ github.sha }} .
        docker push ${{ secrets.ACR_LOGIN_SERVER }}/h905awi-qa-mobility:${{ github.sha }}
             
    # Setup kubectl and connect to AKS cluster
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: H905_AWI_Group
        cluster-name: h905awi_dev_aks
    
    # Update Mobility deployment
    - name: Update Mobility Deployment
      env:
        DEPLOYMENT_NAME: h905awi-qa-mobility
        CONTAINER_NAME: h905awi-qa-mobility
        IMAGE_URI: ${{ secrets.ACR_LOGIN_SERVER }}/h905awi-qa-mobility:${{ github.sha }}
      run: |
        kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$IMAGE_URI
        kubectl rollout status deployment/$DEPLOYMENT_NAME
